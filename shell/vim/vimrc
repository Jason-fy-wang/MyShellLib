" 控制
:set  backspace=2    " 能使用backspace回删
:syntax on                " 语法检测
":set mouse=a            " 设置可以再VIM使用鼠标
:set mouse=                " 关闭鼠标
:set history=1000        " 设置历是记录条数
:set nocompatible       " 设置不兼容
filetype off                  " 关闭文件类型侦测,   vundle需要
:set fileencodings=utf-8,GBK  "使用utf-8和gbk编码方式
:set endcoding=UTF-8
:set confirm                  " 在处理未保存或只读文件时,  弹出确认信息
:set  nobackup            "不使用备份
:set  whichwrap=<,>,[,]    "当光标到行首或行尾, 允许左右方向键换行
:set  autoread                "文件在vim外修改过, 自动重载
:set selection=inclusive    "选择包含最后一个字符
:set selectmode=mouse,key    "启动选择模式的方式
:set completeopt=longest,menu  " 只能补全,  弹出菜单,  无歧义时在自动填充
:set noswapfile            " 关闭交换文件
:set  hidden                    " 允许在有为保存的修改时切换缓冲区

:set wildmenu       "显示匹配的menu
"不生成 .un~ 文件
" windows 需要修改默认的vimrc_example.vim 文件
:set noundofile
" 显示
:set number    "设置显示行号
:set ruler              "显示最后一行的状态, 标尺
:set background=dark            " 背景色设置
:set hlsearch             " 高亮度反白
:set laststatus=2        " 两行 状态行+一行命令行
:set cindent             " 设置c语言自动对齐
:set t_Co=256            " 设置指定配色方案为256
:set showcmd             " 显示输入的命令
:set showmatch             "高亮括号匹配
:set matchtime=1         "匹配括号高亮的时间(十分之一秒)
:set matchpairs={:},(:)  " 匹配括号
:set incsearch           "边检索边显示匹配
:set go-=T               " 去除gvim的toolbar
:set linebreak			 "整词换行
colorscheme darkblue

"格式    
:set noexpandtab        "不要将tab转换为空格
:set shiftwidth=4         "自动缩进的距离, 也是平移字符的距离
:set tabstop=4            " tab键对应的空格数
:set autoindent            " 自动缩进
:set smartindent           "智能缩进
"设置nerdTree的根目录为当前打开的文件目录
autocmd BufEnter * silent! if bufname('%') !~# 'NERD_tree_' | cd %:p:h | NERDTreeCWD | wincmd p | endif

"工具栏的设置,并映射到 F2键
set guioptions-=m
set guioptions-=T
map <silent> <F2> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=T <Bar>
        \set guioptions-=m <bar>
    \else <Bar>
        \set guioptions+=T <Bar>
        \set guioptions+=m <Bar>
    \endif<CR>

" 禁用箭头键
map <up>  <nop>
map <down>  <nop>
map <left>  <nop>
map <right>  <nop>

"在插入模式下加入一对括号或引号
inoremap ' ''<esc>i
inoremap " ""<esc>i
inoremap ( ()<esc>i
inoremap { {}<esc>i
inoremap [ []<esc>i


" vim-plug 插件管理
call plug#begin()
" 侧边浏览文件
Plug 'scrooloose/nerdtree'
" 自动补全
Plug 'Valloric/YouCompleteMe'
" 彩色状态栏
Plug 'bling/vim-airline'
" 撤销树
Plug 'sjl/gundo'
call plug#end()



if  has("cscope")
    set  cscopetag  " 支持使用 ctrl+] 和 ctrl+t 快捷键在代码间跳来跳去
    " check cscope for definition of a symbol before checking ctags
    " set to 1 if you want  the reverse search order
    set csto=1

    " add any cscope database in current directory
    "if filereadable("cscope.out")
    "    cs add cscope.out
    " else add the database pointed to by enviroment variable
    "elseif $CSCOPE_DB != ""
    "    cs add $CSCOPE_DB
    "endif

    " show msg when any other cscope d added
    set cscopeverbose
    
    nmap <C-/>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>f :cs find f <C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>i :cs find i ^<C-R>=expand("<cword>")<CR><CR>
    nmap <C-/>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif




"快捷键:使用F3打开关闭
map <F3> :NERDTreeMirror <CR> 
map <F3> :NERDTreeToggle <CR>  
"NERDTree配置  
let NERDChristmasTree=1 "显示增强
let NERDTreeAutoCenter=1 "自动调整焦点
let NERDTreeShowFiles=1 "显示文件
let NERDTreeShowLineNumbers=1 "显示行号
let NERDTreeHightCursorline=1 "高亮当前文件
let NERDTreeShowHidden=0 "显示隐藏文件
let NERDTreeMinimalUI=0 "不显示'Bookmarks' label 'Press ? for help'
let NERDTreeWinSize=31 "窗口宽度
