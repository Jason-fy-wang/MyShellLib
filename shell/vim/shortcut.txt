# 快捷键
-   # 跳转到行首
$   # 跳转到行尾
w   # 狭义单词 
W   # 广义单词
E   # 广义单词
e   # 狭义单词
b   # 单词首 狭义
B   # 单词首 广义
f   # 行内查找
F   # 反向查找
t   # 行内查找 字符
T   # 反向查找
c   # 替换
d   # 删除
p   # 粘贴
y   # 复制
{   # 段落跳转
}   # 段落跳转
o   # 光标下 添加一行
O   # 光标上添加一行
H   # 进入当前的窗口 头
L   # 进入当前的窗口 尾
a   # 在当前光标后进行插入
A   # 在当前行后进行插入    等效于 $i
I(大写i)  # 在当前行首插入  等效于 _i
shift+(   # 句子开头
shift+)   # 句子末尾
ctrl+f    # 翻页
ctrl+b    # 向前翻页
v         # 字符可视模式
V         # 行可视模式
ctrl+v    # 块可视模式

## 指定shell命令
:!cmd   # 执行命令
:r !cmd  # 将命令结果追加到当前行的下一行
:startline,endline!cmd   # 将起始行中的内容 交给 cmd处理,如:1,4!sort  对1-4行排序
        # :1 !tr [a-z] [A-Z] 将第一行的小写字母转换为大写
        # :. !tr [a-z] [A-Z] 将当前行小写转换为大写
        # :1,4 w !sort  当1-4行的内容进行排序,但排序结果并不过直接输出到当前编辑的文件中,而是显示到vim敲命令的区域
        # :1 w !bash 将第一行内容作为bash命令来执行并显示结果,而且不会改变当前编辑的文件内容 

## 列编辑
ctrl+v  # 进入列模式
ctrl+v, I # 列插入模式


#### 模式
### 正常模式

### 命令行模式
ctrl+p  # 浏览前一个命令记录
ctrl+n  # 浏览下一个命令记录
ctrl+b  # 快速定位到命令行开头
ctrl+e  # 快速定位到命令尾
shift,ctrl   # 按照字符遍历命令
ctrl+f  # 打开命令行历史记录窗口
ctrl+c  # 编辑命令历史记录
:help cmdline-editing   # 查看帮助

### 插入模式
ctrl+o  # 执行正常模式下的命令

### 可视模式 和 选择模式

### 替换模式和虚拟替换模式
R   #进入替换模式
r   # 单字符替换模式
:help vreplace-mode  # 查看虚拟帮助文档

###终端模式
:terminal       # 进入终端模式 简写为 :term
:term python3 animal.py     # 运行命令

### 寄存器
:<<9
1. The unnamed register ""
2. 10 numbered registers "0 to "9
3. The small delete register "-
4. 26 named registers "a to "z or "A to "Z
5. four read-only registers ":, "., "% and "#
    ".  包括上次插入的内容
    "%  包含当前的文件名
    "#  包含最近候补的文件名
    ":  包含最近执行的命令
6. the expression register "=
7. The selection and drop registers "*, "+ and "~
    "*  表示系统的粘贴板
    "+  针对linux的 ctrl+c  ctrl+v 操作
    "~  
8. The black hole register "_
9. Last search pattern register "/

:reg    # 查看寄存器内容
"0p     # 把0寄存器内容复制出来
"Awy   # 寄存器大写 附加单词到 寄存器a
9
### 缓存
:ls          # 列出所有缓存
:b + 序号    # 跳转到对应的缓存

### 标签
:tabnew     # 创建新标签
            # 输入 :tab 可以使用 tab补全 查看其它命令

### 窗口管理
:split file         # 水平分割
:vsplit             # 垂直分割
ctrl+w, x   # 将当前窗口与下一个窗口的内容交换
ctrl+w,r    # 将当前行或当前列(行优先于列)中的每个窗口内容向右或向下移动
ctrl+w,R    # r的相反操作
# 窗口移动
:help  window-moving
ctrl+w,H  # 将当前窗口移动到屏幕最左边
ctrl+w,J  # 将当前窗口移动到屏幕的底部
ctrl+w,K  # 将当前窗口移动到屏幕顶部
ctrl+w,L  # 将当前窗口移动到屏幕最右边

# 窗口resize
:help  window-resize
ctrl+w,=   # 将打开窗口宽和高调整为一致
:resize +N  #将当前窗口的高度增加N行
:resize -N  # 将当前窗口的高度减少N行
:vertical resize +N #将当前窗口宽度增加N行
:vertical resize -N #将当前窗口的宽度减少N列
## :resize 可以简写为 :res   vertical 可简写为 :vert
ctrl+w,-    # 调整高度
ctrl+w,+    # 调整高度
ctrl+w,<    # 调整宽度
ctrl+w,>    # 调整宽度

### 文件
:e   # 打开编辑新文件
:Explorer pattern  # 浏览文件


### 内置宏变量
$MYVIMRC   # 配置文件位置
$VIMRUNTIME 
# 修改配置并应用配置
:w | source $MYVIMRC | PlugInstall


### vim-plug 插件关键
:PlugInstall   # 安装插件



### vimdiff的操作
# 快捷键
]c  在修改处之间向前跳转
[c  在修改处之间向后跳转

# 命令
# 当同时对比多个文件时,使用:diffget 或 :diffput 修改添加对应的一个来源缓存区名字或目的缓冲区名字 即文件名,表示应用到那个文件
do(diff obtain) | :diffget  将文件修改应用于当前窗口中的文件
dp(diff put) | :diffput     将当前窗口中的文件修改推送给另一个文件
:%diffget   将文件整体应用于当前文件
:%diffput   将文件修改整体推送给另外一个文件
:diffupdate  手动更新高亮显示

# vim解决版本冲突时
对应4个窗口从左到右 从上到下分别是: local   base  remote  merged(最下面的)
local   当前分支的一个文件(或待合并的任意文件)
base    共同祖先. 该文件在两个分支中的共同祖先
remote  另一个分支中待合并的文件
merged  合并结果,即将要保存的输出结果
1. 如果要保存remote中的修改,先让光标移动到merged窗口(底部窗口),然后将光标移动到下一个修改处(除常规快捷键,还可以使用]c [c 在多个修改处跳转), 最后执行如下命令:  :diffget remote, 这会将remote中文件修改应用于merged窗口中的文件上.
上述命令可以简化为:
:diffg R        获得remote中的一个修改
:diffg B        获得base中的一个修改
:diffg L        获得local中的一个修改


### 命令重映射
# 命令
:help index  查看内部按键绑定
:map        命令可以查看插件和读者自定义的映射,如: :map g 将显示所有以g键开头的映射

# 配置
:map        用于递归映射,这意味着此重映射的命令可以识别自定义映射
:noremap    用于非递归映射, 针对系统默认映射
:noremap ; :   用分号取代默认的冒号
:unmap      显示移除自定义或插件定义的映射
:mapclear   将读者自定义的映射和默认映射都清除掉
:noremap <c-u> :w<cr>   使用ctrl-u老保存文件

# vim中的特殊键
<c-u>   表示ctrl-u组合
<c-_>   其中_为某个字符, c表示ctrl
<a-_>   表示alt加上某个键
<m-_>   表示alt加上某个键, <m-b> 表示alt+b 组合键
<s-_>   表示shift键加上某个键,<s-f>表示shift+f组合键
<cr>    表示enter键
<enter> 表示enter键
<space> 表示空格
<esc>   表示Esc键
<tab>   表示tab键
bs      表示退格键
<up> <down> <left> <right>  表示箭头键
<pageup> <pagedown> 表示上下翻页
<home>  <insert> <del> <end>    分别表示 home insert  del  end键

## 禁用箭头功能,是自己习惯hjkl风格
map <up>  <nop>
map <down>  <nop>
map <left>  <nop>
map <right>  <nop>

## 模式感知的重映射
:nmap 和 :nnoremap  用于正常模式
:vmap 和 :vnoremap  用于可视和选择模式
:xmap 和 :xnoremap  用于可视
:smap 和 :snormap   用于选择模式
:nmap 和 :onoremap  用于操作待决模式
:map! 和 :noremap!  用于插入和命令行模式
:imap 和 :inoremap 用于插入模式
:cmap 和 :cnoremap 用于命令行模式

"在插入模式下加入一对括号或引号
inoremap ' ''<esc>i
inoremap " ""<esc>i
inoremap ( ()<esc>i
inoremap { {}<esc>i
inoremap [ []<esc>i

"将先导键重新映射为逗号
let mapleader = ','
"将先导键映射为空格
let mapleader = "\<space>"
"使用leader-w保存文件
noremap <leader>w :w<cr>
noremap <leader>n :NERDTreeToggle<cr>


### 撤销树
:GundoToggle   以分割窗口打开两个新窗口,左上为树状结构可视化表达,光标选中了其中一个版本,左下窗口则显示此版本和上一版本的差异
通过j和k可以让光标在Gnudo左上窗口上下移动. gg 可以跳转到顶部
按enter键 gundo将恢复到这个编辑的版本上.
:help undo-tree 查看帮助



