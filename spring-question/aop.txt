aop 
1. 是什么时候创建的代理？          bean初始化后,调用后置处理器进行的代理
2. 是什么时候解析的切面信息?       切面信息是在wrapIfNecessary-->getAdvicesAndAdvisorsForBean 方法中解析的
3. aop中 jdk 代理的具体过程,       
    AbstractAutoProxyCreator-->wrapIfNecessary-->getAdvicesAndAdvisorsForBean-->createProxy,当然了具体创建的时候回进行一些判断来决定是JDK代理还是cglib代理
        proxyFactory
    cglib的具体创建过程(cglib先放到后面)
4. aop 中 对于切面的调用过程      ok


spring整体框架图的抽象

事务
1. 事务的创建时机
2. 事务的存储位置
3. 事务传播机制
4. 事务的调用过程
5. 事务的控制 以及 事务编写的亮点
    


mybatis
 mybatis中接口mapper文件的对应关系如何创建
 mybatis中代理的创建过程 以及 调用过程
 mybatis-spring   mybatis和spring是如何整合的? 整合原理的分析
 mybatis中插件  pagehelper 是如何使用,以及如何整合到mybatis中的
 spring的事务的创建 以及 调用过程


mybatis-spring
    1.mapper接口和mapper.xml文件是如何进行对应的?  namespace+"."+id  对应 sql的statement
    2.为什么获取接口文件就能获取到其实体?       偷梁换柱
    3.此时的sqlSession为什么是线程安全的?       
    4.注册mapper接口文件时,到底做了什么手脚?    偷梁换柱
    5.mybatis如何使用spring中的事务的?



note：
后置处理器
AutowiredAnnotationBeanPostProcessor  解析 Autowired value inject 自动注入的操作
CommonAnnotationBeanPostProcessor  解析 Resource Ejb  PostConstruct  PreDestroy WebServiceRef
ConfigurationClassPostProcessor 解析  import  configuration importResource
                                对 ImportBeanDefinitionRegistrar 的解析
PersistenceAnnotationBeanPostProcessor 解析 PersistenceUnit  PersistenceContext
InitDestroyAnnotationBeanPostProcessor (CommonAnnotationBeanPostProcessor 是子类,指定了具体的注解操作) 解析PostConstruct  PreDestroy


AOP处理
从注解: @EnableAspectJAutoProxy 入手
//  aop 创建的三个类
APC_PRIORITY_LIST.add(InfrastructureAdvisorAutoProxyCreator.class);
APC_PRIORITY_LIST.add(AspectJAwareAdvisorAutoProxyCreator.class);
APC_PRIORITY_LIST.add(AnnotationAwareAspectJAutoProxyCreator.class);

BeanFactoryAspectJAdvisorsBuilder -> ReflectiveAspectJAdvisorFactory 
            获取Around.class, Before.class, After.class, AfterReturning.class, AfterThrowing.class的注解的处理

AbstractAdvisorAutoProxyCreator -> BeanFactoryAdvisorRetrievalHelper 对Advisor类的处理

InstantiationModelAwarePointcutAdvisorImpl  存储aop 的pointcut


事务 :
InfrastructureAdvisorAutoProxyCreator 事务的aop创建
ProxyTransactionManagementConfiguration  事务代理的配置
TransactionInterceptor  事务拦截器,也就是 事务调用时以此函数为入口
